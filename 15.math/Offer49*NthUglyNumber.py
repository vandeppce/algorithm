# 我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。
# 考虑三个数组
# 1*2, 2*2, 3*2, 4*2, 5*2, 6*2, 8*2, 9*2, 10*2, 12*2
# 1*3, 2*3, 3*3, 4*3, 5*3, 6*3, 8*3, 9*3, 10*3, 12*3
# 1*5, 2*5, 3*5, 4*5, 5*5, 6*5, 8*5, 9*5, 10*5, 12*5
# 丑数数组可以看作这三个数组的有序排列
# 这里注意的是与因子2，3，5相乘的因子也要是丑数数组中的数，因此设置三指针，分别记录2，3，5的另一个因子在丑数数组中的位置

class Solution:
    def nthUglyNumber(self, n: int) -> int:
        dp = [1] * n
        a, b, c = 0, 0, 0
        for i in range(1, n):
            n2, n3, n5 = dp[a] * 2, dp[b] * 3, dp[c] * 5
            dp[i] = min(n2, n3, n5)
            # 注意，由于三个数组中可能会有重复，因此要用三个if，而不是if else
            if dp[i] == n2:
                a += 1
            if dp[i] == n3:
                b += 1
            if dp[i] == n5:
                c += 1
        return dp[-1]

n = 18
solu = Solution()
print(solu.nthUglyNumber(n))