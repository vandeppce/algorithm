# 3n 块披萨
# 给你一个披萨，它由 3n 块不同大小的部分组成，现在你和你的朋友们需要按照如下规则来分披萨：
#
# 你挑选 任意 一块披萨。
# Alice 将会挑选你所选择的披萨逆时针方向的下一块披萨。
# Bob 将会挑选你所选择的披萨顺时针方向的下一块披萨。
# 重复上述过程直到没有披萨剩下。
# 每一块披萨的大小按顺时针方向由循环数组 slices 表示。
#
# 请你返回你可以获得的披萨大小总和的最大值。

# 输入：slices = [1,2,3,4,5,6]
# 输出：10
# 解释：选择大小为 4 的披萨，Alice 和 Bob 分别挑选大小为 3 和 5 的披萨。然后你选择大小为 6 的披萨，Alice 和 Bob 分别挑选大小为 2 和 1 的披萨。你获得的披萨总大小为 4 + 6 = 10 。

# 输入：slices = [8,9,8,6,1,1]
# 输出：16
# 解释：两轮都选大小为 8 的披萨。如果你选择大小为 9 的披萨，你的朋友们就会选择大小为 8 的披萨，这种情况下你的总和不是最大的。

# dij表示前i个数选择j个不相邻元素的最大和，则递推公式为dij=max(d[i-2][j-1]+slice[i],d[i-1][j])

s = [1,2,3,4,5,6]
# s = [4,1,2,5,8,3,1,9,7]
# s = [3,1,2]
# s = [8,9,8,6,1,1]
def calculate(s):
    length = len(s)
    n = length // 3 + 1

    dp = [[0] * n for _ in range(length)]

    for i in range(length):
        for j in range(n):
            if (i + 1) == 2 * (j + 1) - 1:
                dp[i][j] = sum(s[:i+1:2])
            if (i + 1) > 2 * (j + 1) - 1:
                if j == 0:
                    dp[i][j] = max(s[:i+1])
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i - 2][j - 1] + s[i])
    return dp[length - 1][n - 1]

ans1 = calculate(s[1:])
ans2 = calculate(s[:-1])

print(max(ans1, ans2))